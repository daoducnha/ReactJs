What is ReactJS?
- ReactJS is a library that generates the view layer of an application based on its state, ReactJS applications are built from React Components - independent resusable components that describe how the UI should look based on their own state and properties.


Why should I use ReactJS?
ReactJS applications are incredibly performant at UI rerendering
React Components make writing UI components easier

What makes ReactJS so efficient at rerendering?

- React Components are used to generate a Virtual DOM
- Virtual DOM is able to be generated much more quickly than the HTML DOM because it does not have to calculate CSS styles and layouts
- When a React Component changes state,the Virtual DOM is recreated and the difference between the new Virtual DOM and the previous Virtual DOM is calculated
- ReactJS library then calculates the most efficient way to update the HTML DOM to reflect these changes=>faster than regenerating the entire HTML DOM from the top.

EX:  <div id="root"></div>

    ReactDOM.render(
        <h1>Hello World!</h1>,
        document.getElementById("root")
    )

React element:

- React Elements are objects that represent a DOM node
- using a syntax extension named JSX
- React Elements are different than React Components
	EX:  var element = <h1>Hello World!</h1>

- React Elements need to be rendered by the ReactDOM.render() method to appear in the DOM.

****ReactDOM.render(): is method is used to render a React Element into a specified part of the HTML DOM
 most React applications, there is usually a single root node where everything gets rendered into, but you may use as many root nodes as you desire.

Rerendering the DOM using additional render() calls

- Once a DOM is rendered, it will remain the same until another render() method is called.

- The following example uses additional render() calls to update the displayed number








What is JSX?

JSX is a syntax extension to JavaScript that allows React Elements to be written inside JavaScript using HTML tags.
	with JSX: var element = <h1>Hello World!</h1>
	without JSX: 
		var element = React.createElement(
			'h1',
			null,
			'Hello World!'
		    )
Using JSX with JavaScript Expressions:
	Curly braces can be used to embed JavaScript expressions into JSX.
	Ex:
	    var str = "World!" 

	    var element =  <h1> Hello {str}</h1> => Hello World!


	ex2:
		var item = {
			name: "Cheese",
			price: 5
		    }
	    var element = <p>{item.name} : ${item.price} </p>

	EX3:
	    var length = 20
	    var width = 10

	    function calculateArea(x,y){
		return x * y
	    }

	    var element = <div>The Area is: {calculateArea(length,width)}</div>
Using JSX with Attributes:
	You can supply attribute values using a string literal surrounded by quotes:
		Ex:  var element = <button className ="deleteButton"> Delete </button>  : className ="deleteButton"

	You can also supply attributes values by embedding a JavaScript expression using curly braces:
		EX:  var element = <img src ={product.imageURL}></img>
	
	Do not surround curly braces with quotes. This will cause your expression to be treated as a string literal:

	    //Do not do this
	    var element = <img src ="{product.imageURL}"></img>


	attribute "class" becomes "className" because "class" is a reserved keyword in JavaScript
	 attribute names in JSX follow the camelCase naming convention so an HTML attribute such as fontsize would become fontSize in JSX.

Using JSX with Empty Tags
	If a HTML tag is empty, you can close it with a '/>' instead of using a closing tag.
	EX:  var element = <input className ="nameInput"/>
Using JSX with a Style Object
	The style attribute can be populated with a style object instead of a string literal
	Ex: 
	 var styleObject = {
		backgroundColor: 'red',
		color:'blue',
		fontSize: 25,
		width: 100
	    }

	=>    var element = <input style = {styleObject}/>

 JSX expression while the second set of curly braces is for the style object:

	var element = <input style = {{width:200,height:100}}/>

Using JSX with Nested Elements
	React Elements can be nested within other React Elements as long as the whole thing is wrapped by in a single element.

	Ex: var element = (
				<div>
				    <div>Hello World</div>
				    <div>Hello World</div>
				</div>

			    )   ======> neu bo the div ngoai cung se bi loi

Using JSX Objects: Objects created with JSX can be manipulated just like normal JavaScript objects. They can be passed in arrays, used as arguments or return statements to functions and used inside if statements or for loops.







===================================


There are two types of React Components:
Class Components: have state, lifecycle methods, and properties
Functional Components:  only have properties.  just functions that output React Elements.By convention, the first letter of the function name should be capitalized

	function HelloWorld(){// return some element    }
use the React Component in JSX by creating an HTML tag with the same name as the React Component
	==> use: var element = <HelloWorld/>
		OR:
		  ReactDOM.render(
			<HelloWorld/>,
			document.getElementById("root")
		    )
	Adding Properties to Functional Components
		 function HelloWorld(props){
			return <h1>Message: {props.message}</h1>
		 }
	You can supply property values the same way as you supply attribute values,
	Properties can be string literals, arrays or any other type of JavaScript object including other React Elements
		EX: 
			<HelloWorld message="Hello World!"/>,
			<HelloWorld index = "3" numberArray={[1,2,3,4,5]}/> =======>  function HelloWorld(props){
										return <h1>Value: {props.numberArray[props.index]} </h1>
										    	}
Composing Components: 

	Functional Components can include other Functional Components in their output => This lets us keep our components organized and readible.

Conditional Rendering
	The output of a Functional Component can be determined based on its properties.
	EX: 
		function Feature(props){
			if (props.active == true){
			    return <h1>This feature is active</h1>
			}
			else{
			    return <h1>This feature is not active</h1>
			}

		    }

	OR
		 function Feature(props){
			return <h1>This feature is {props.active? "active" : "not active"}</h1>
		    }

Preventing Rendering
	The output of a Functional Component can be prevented from rendering.

	 return null => khong render

	You can also conditionally prevent a feature from rendering using the && operator:

		return (
			    props.active && <h1>{props.message}</h1>
			)

With the && operator, true and expression will always evaluate to expression. On the other hand, false and expression will always evaluate to false which won't render.


================================================



Class Components
	- React Components can also be written using ES6 classes.
	- have life cycle methods and state.
	- two instance properties, this.state and this.props. Represent the component's state and properties respectively.

	Both types of React Components can be used by writing their name within an HTML tag: var element = <Welcome/>
	- render() method of a class component is used to describe what kind of React Element is going to be returned from the Class Component
	- render() same as the return value of a Functional Component;

Adding properties to Class Components:
	- The properties of a Class Component can be accessed through the this.props attribute.
	- differs slightly from Functional Components where the properties were passed in as a variable.
	Ex: render(){
        return <h1>Message: {this.props.message}</h1>
    }
================================================

State component:

Constructor(props)
	- constructor() method is called before a React Component is mounted and is used to set up the initial state of the component.
	- It is important to call super(props) at the beginning of the constructor() method or else the this.props attribute may not work correctly
	-  first argument represents the properties that are passed into the component.

		EX:  constructor(props){
			super(props)
		    }

Adding an initial state to Class Components: 
	initial state of a Class Component can be declared within the constructor() The state of the component must be declared as an object with attributes.
		EX:
			constructor(props){
				super(props)
				this.state = {foo:123,bar:456} ==> init state component
			    }
			render(){
				return <div>foo:{this.state.foo} bar:{this.state.bar}</div>
			    }
Updating state: - The setState(updater,[callback]) method is used to update state component 
		- It takes in an updater object and updates the component state by shallowly merging the updater object's attributes with the 			previous component state
		-  The method updates the state asynchronously => option callback that will be called once the state has finished updating completely.
		- In order to use the setState() method, it must be referenced by calling this.setState().

		The setState method will trigger the updating phase of the component lifecycle to start ===> the component to rerender unless 			the shouldComponentUpdate() function returns false.

		Ex:   	constructor(props){
				super(props)
				//initial state set up
				this.state = {message:"initial message"}
			    }
			componentDidMount(){
				//updating state
				this.setState({message:"new message"})
			    }

Updating state based on previous state
	-  setState() method does not immediately update the state of the component, it just puts the update in a queue to be processed later
	-  React may batch multiple update requests together to make rendering more efficient
	=> special precautions must be made when updating the state based on the component's previous state. 
	- The method updates the state asynchronously, => option callback that will be called once the state has finished updating completely.

	EX:
		this.setState((prevState, props) => { 
		    return {attribute:"value"}
		})

Using future state values:
	Since state updates asynchronously, you can not just expect the state values to update immediately after a setState() method call

State is not mutable:
	- State is read only =>  If the state needs to be updated, the setState() method is the only way to change the state.
	- you should not try to manually change the values of the state attributes.
	EX:		
		//incorrect, state should not be mutated directly
		this.state.message = "new message"

===========================


Life Cycle Methods
	Mounting Phase Methods: The mounting phase begins when an instance of a component is created and rendered into the DOM.

		1- constructor(props) - called when the component is first initialized. This method is only called once.
		2- componentWillMount() - called when a component is about to mount.
		3- render() - called when a component is rendered.
		4- componentDidMount() - called when a component has finished mounting. This is where network requests are usually made.
		
	Updating Phase Methods: begins when a component's properties or state changes.
		
		1- componentWillReceiveProps(nextProps) - called when a component has updated and is receiving new props.
		2- shouldComponentUpdate(nextProps, nextState) - called after receiving props and is about to update. If this method returns 				false, componentWillUpdate(), render(), and componentDidUpdate() will not execute.
		3- componentWillUpdate(nextProps, nextState) - called when a component is about to be updated.
		4- render() - called when a component is rerendered.
		5- componentDidUpdate(prevProps, prevState) - called when a component has finished updating.
			Unmounting Phase Methods:  when a component is being removed from the DOM.

		1- componentWillUnmount() - called immediately before a component unmounts. This is where any cleanups are made such as 			cancelling timers or network requests.
==========================

Adding Event Handlers

	Handling events in React is similar to handling events in HTML. To attach an event handler to a React Element, assign the event handler method to the appropriate event attribute.
	React is that you can use JSX brackets to specify the event handler function
	React events are named using camelCase instead of being all lowercase.  For example, onclick and onkeypress in HTML become onClick and onKeyPress in React respectively.
	EX: <button onClick = {clickHandler} >Click Me</button>

Binding Event Handlers to Class Components: Event handlers can be defined as methods within a class Component.
	 bind() method is used to bind the clickHandler() method's this keyword to the component instance. EX: 
		this.clickHandler = this.clickHandler.bind(this)
	. Without binding the function, the function will have its this keyword point to an incorrect object and the setState() method will not work correctly.
	An alternative to using bind() is to attach the event handler to the React Element using an ES6 arrow function: The arrow function will automatically have its this keyword point to the enclosing scope which happens to be the component instance.

	Ex: <button onClick = {{ () => this.clickHandler()}}>{this.state.count}</button>
=================== 

Lifting State Up

The setState() method only allows components to update their own state.

===============================


Rendering arrays of React Elements
JSX will render an array of React Elements as long as there is at least one element enclosing all of the array elements.
		elements will be inserted into the enclosing element:
	EX:  
		var elements = [] 
		var array = [1,2,3,4,5]

		for(let i = 0; i < array.length; i++){
		   elements.push(<li>{array[i]}<li/>) //push tag <li> element gi do </li> (trong 1 tag co mo va dong)
		}


		ReactDOM.render(
		  <ol>{elements}</ol>, // render ra html bang cach khai bao {element}
		  document.getElementById('root')
		)
Using Map() to render arrays of React Elements
	map() method is often used to create an array of React Elements
	map() method is called on an array and returns a new array with a provided function applied to each element in the original array
	EX:
		
	var array = [
	  {product:"Apple", price:3},
	  {product:"Banana", price:1},
	  {product:"Carrot", price:2},
	  {product:"Donuts", price:5},
	  {product:"Eggplant", price:4}
	]

	var elements = array.map((item) => {
	  return <li>Product:{item.product} | Price: ${item.price}</li>
	})

Hoac dung truc tiep trung phuong thuc render :
	EX:
		ReactDOM.render(
		  <ol>{
		      array.map( (item) => 
			  <li>Product: {item.product} | Price: ${item.price} </li>
		      )}
		  </ol>,
		  document.getElementById('root')
		)
Adding Keys to List Items: React uses Keys to help render list items quickly  Keys should be a string that uniquely identifies a list item from the other items on the list, such as an ID attribute.

	var array =[
		  {id: 100, product:"Apple", price:3},
		  {id: 104, product:"Eggplant", price:4}
		]

	var elements = array.map( (item) => {
	  return <li key={item.id}>Product: {item.product} | Price: ${item.price}  </li> ///  Add key: key={item.id}
	})
If your array items do not have anything that can uniquely identify them, you can use the item index as a last resort for the key value.
	EX: return <li key={index}>Product: {item.product} | Price: ${item.price}  </li>>

Building a List Component:
	It is useful to be able to build a React Component that can dynamically generate a list from an array property that is passed into it.
	Ex:
	class ProductList extends React.Component{
	  
	  render(){
	    var elements = this.props.productArray.map( (item,index) => {
	      return <li key={item.id}>Product: {item.product} | Price: ${item.price}  </li>
	    })
	    return <ol>{elements}</ol>
	  }
	}

	var array =[
	  //some element 
	]

	ReactDOM.render(
	  <ProductList productArray = {array}/>,
	  document.getElementById('root')
	)

Extracting List Items
	Each list item may be extracted into its own React Component to make the code more maintainable.
	If the list items are extracted, the keys do not need to be passed down to the list item components
	Keys are only necessary when React Elements are generated dynamically using arrays: key chi can khi react element generate tu dong khi su dung mang
EX:
	function ListItem(props){
	  //khong xai array de render => khong can dung key 
	  return <li>Product: {props.product} | Price: ${props.price}  </li>
	  
	}


	class ProductList extends React.Component{
	  render(){
	    var elements = array.map( (item,index) => {
	      //need to add a key here vi can xai array de render
	      return <ListItem key={item.id} product={item.product} price = {item.price}/>
	    })

	    return (
	      <ol>
		{elements}
	      </ol>
	    )

	  }

Controlled Components
	We accomplish this by doing the following two steps:

	Whenever the input value is changed, call an event handler to update the component state to the new input value
	Re render the the React Element with its value attribute set to the updated state input value

Controlling Input fields
	To turn an input field into a Controlled Component, we must first declare an event handler that will update the state input value whenever the form input value is changed.
	The event.target.value attribute can be used to obtain the form input value:

	 handleChange(event){
		this.setState({value: event.target.value})
	    }
	
 attach the event handler to the <input> element and set the input value equal to the state input value:
	render(){
		return (
		    <input type = "text" value = {this.state.value} onChange = {this.handleChange}/>
		)
	    }
Lastly, we must not forget to bind the event handler to the component instance and also declare the initial state value:

	constructor(props){
		super(props)
		this.state = {value: ''}
		this.handleChange = this.handleChange.bind(this)
	    }

=>>
	class ControlledInput extends React.Component{

	    constructor(props){
		super(props)
		this.state = {value: ''}
		this.handleChange = this.handleChange.bind(this)
	    }
	    handleChange(event){
		this.setState({value: event.target.value}) // add event khi change
	    }
	    render(){
		return (
		    <input type = "text" value = {this.state.value} onChange = {this.handleChange}/>
		)
	    }
	}

vs check box:  	this.state = {checked: false}
		this.setState({checked: event.target.checked})
		<input type = "checkbox" checked = {this.state.checked} onChange = {this.handleChange}/>


Handling Multiple Inputs
	 this.setState({[event.target.name]: event.target.value})
	 <input name="inputName" type = "input" value = {this.state.inputName} onChange = {this.handleChange}/>	=> name="inputName"  value = {this.state.inputName} chi ra ten cua event trung voi attribute name

